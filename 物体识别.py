# object detector boot.py
# generated by maixhub.com

import sensor, image, lcd, time
import KPU as kpu
import gc, sys

def lcd_show_except(e):
    import uio
    err_str = uio.StringIO()
    sys.print_exception(e, err_str)
    err_str = err_str.getvalue()
    img = image.Image(size=(224,224))
    img.draw_string(0, 10, err_str, scale=1, color=(0xff,0x00,0x00))
    lcd.display(img)

'''
#   参数           作用              默认
#   labels         标签              None
#   model_addr     模型名称          "/sd/m.kmodel"
#   sensor_window  窗口大小          (224, 224)
#   lcd_rotation   LCD翻转           0
#   sensor_hmirror 摄像头水平翻转    False
#   sensor_vflip   摄像头垂直翻转    False
'''
def main(anchors, labels = None, model_addr="/sd/m.kmodel", sensor_window=(224, 224), lcd_rotation=0, sensor_hmirror=False, sensor_vflip=False):
    sensor.reset()                       # 初始化摄像头
    sensor.set_pixformat(sensor.RGB565)  # RGB
    sensor.set_framesize(sensor.QVGA)    # 分辨率QVGA 320*240
    sensor.set_windowing(sensor_window)  # 窗口大小 
    sensor.set_hmirror(sensor_hmirror)   # 水平翻转
    sensor.set_vflip(sensor_vflip)       # 垂直翻转
    sensor.run(1)                        # 运行摄像头

    lcd.init(type=1)            # lcd初始化
    lcd.rotation(lcd_rotation)  # lcd翻转
    lcd.clear(lcd.WHITE)        # lcd清屏

    if not labels:                          # 如果没有标签
        with open('labels.txt','r') as f:   # 打开文件
            exec(f.read())                  # 执行文件内容
    if not labels:                          # 如果没有标签
        print("no labels.txt")              # 如果没有标签
        img = image.Image(size=(320, 240))  # 产生图片
        img.draw_string(90, 110, "no labels.txt", color=(255, 0, 0), scale=2)  # 写字报错
        lcd.display(img)   # lcd显示报错图片
        return 1
    '''
    try:
        img = image.Image("startup.jpg")
        lcd.display(img)
    except Exception:
        img = image.Image(size=(320, 240))
        img.draw_string(90, 110, "loading model...", color=(255, 255, 255), scale=2)
        lcd.display(img)
    '''
    task = kpu.load(model_addr)  # 导入模型 
    kpu.init_yolo2(task, 0.5, 0.3, 5, anchors) # 阈值：[0,1]，nms_值：[0,1]
    try:
        while(True):
            img = sensor.snapshot()  # 拍摄一张照片
            t = time.ticks_ms()      # 得到时间
            objects = kpu.run_yolo2(task, img)  # 比较拍的图和模型
            t = time.ticks_ms() - t   # 相减得到处理时间
            if objects:  # 判断是否找到物体
                for obj in objects:  # 分别画框
                    pos = obj.rect()  # 
                    img.draw_rectangle(pos)
                    img.draw_string(pos[0], pos[1], "%s : %.2f" %(labels[obj.classid()], obj.value()), scale=2)
            img.draw_string(0, 200, "t:%dms" %(t), scale=2)
            lcd.display(img)
    except Exception as e:  # 抛出异常
        raise e             # 终止程序
    finally:                # 无论异常都运算
        kpu.deinit(task)    # 销毁task


if __name__ == "__main__":
    try:
        labels = ["AA"]
        anchors = [2.8701953887939453, 3.353672981262207, 2.503620982170105, 2.921717882156372, 3.2991647720336914, 3.7671308517456055, 1.7626739740371704, 2.0590524673461914, 3.95480227470398, 4.406684875488281]
        # main(anchors = anchors, labels=labels, model_addr=0x300000, lcd_rotation=0)
        main(anchors = anchors, labels=labels, model_addr="/sd/m.kmodel")
    except Exception as e:
        sys.print_exception(e)
        lcd_show_except(e)
    finally:
        gc.collect()
