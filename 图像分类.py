# object classifier boot.py
# generated by maixhub.com

import sensor, image, lcd, time
import KPU as kpu
import gc, sys

def lcd_show_except(e):                #定义lcd显示异常函数
    import uio
    err_str = uio.StringIO()
    sys.print_exception(e, err_str)
    err_str = err_str.getvalue()
    img = image.Image(size=(224,224))
    img.draw_string(0, 10, err_str, scale=1, color=(0xff,0x00,0x00))
    lcd.display(img)
    
    
'''
#   labels         标签
#   model_addr     模型名称
#   sensor_window  窗口大小
#   lcd_rotation   LCD翻转
#   sensor_hmirror 摄像头水平翻转
#   sensor_vflip   摄像头垂直翻转
'''
def main(labels = None, model_addr="/sd/m.kmodel", sensor_window=(224, 224), lcd_rotation=0, sensor_hmirror=False, sensor_vflip=False):
    sensor.reset()                         # 初始化摄像头
    sensor.set_pixformat(sensor.RGB565)    # RGB
    sensor.set_framesize(sensor.QVGA)      # 分辨率QVGA 320*240
    sensor.set_windowing(sensor_window)    # 窗口大小 
    sensor.set_hmirror(sensor_hmirror)     # 水平翻转
    sensor.set_vflip(sensor_vflip)         # 垂直翻转
    sensor.run(1)                          # 运行摄像头

    lcd.init(type=1)            # lcd初始化
    lcd.rotation(lcd_rotation)  # lcd翻转
    lcd.clear(lcd.WHITE)        # lcd清屏

    if not labels:                          # 如果没有标签
        with open('labels.txt','r') as f:   # 打开文件
            exec(f.read())                  # 执行文件内容
    if not labels:                          # 如果没有标签
        print("no labels.txt")              # 如果没有标签
        img = image.Image(size=(320, 240))  # 产生图片
        img.draw_string(90, 110, "no labels.txt", color=(255, 0, 0), scale=2)   # 显示没有标签
        lcd.display(img)     # lcd显示报错图片
        return 1
    '''    try:
        img = image.Image("startup.jpg")
        lcd.display(img)
    except Exception:
        img = image.Image(size=(320, 240))
        img.draw_string(90, 110, "loading model...", color=(255, 255, 255), scale=2)
        lcd.display(img)
    '''
    task = kpu.load(model_addr)  # 导入模型      

    try:                        #异常探试
        while(True):
            img = sensor.snapshot()     # 拍摄一张照片
            t = time.ticks_ms()         # 得到时间
            fmap = kpu.forward(task, img)   # 比较拍的图和模型
            t = time.ticks_ms() - t   # 相减得到处理时间
            plist=fmap[:]             # 复制一份fmap
            pmax=max(plist)             #取最大
            max_index=plist.index(pmax)         #取最大值的索引值
            img.draw_string(0,0, "%.2f : %s" %(pmax, labels[max_index].strip()), scale=2)#在图片中写最大和对应标签
            img.draw_string(0, 200, "t:%dms" %(t), scale=2) #写时间戳
            lcd.display(img)            #显示图片
    except Exception as e:  # 抛出异常
        raise e             # 终止程序
    finally:                # 无论异常都运算
        kpu.deinit(task)    # 销毁task


if __name__ == "__main__":  # 本文件运行时
    try:     # 试探
        labels = ["B", "C", "A"]
        # main(labels=labels, model_addr=0x300000)
        main(labels=labels, model_addr="/sd/m.kmodel")  # 进入函数
    except Exception as e:          # 如果异常
        sys.print_exception(e)      # 异常显示
        lcd_show_except(e)          # lcd异常显示
    finally:                    # 无论异常都执行
        gc.collect()            # 释放内存
